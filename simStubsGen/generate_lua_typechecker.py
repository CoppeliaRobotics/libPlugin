import argparse
import os
import sys
from parse import parse
from model import ParamTable

parser = argparse.ArgumentParser(description='Generate Lua typechecker.')
parser.add_argument('lua_file', type=str, default=None, help='the input lua file')
parser.add_argument('xml_file', type=str, default=None, help='the (lua) XML file')
parser.add_argument('out_file', type=str, default=None, help='the output lua file')
args = parser.parse_args()

if args is False:
    SystemExit

plugin = parse(args.xml_file)

with open(args.out_file, 'wt') as f:
    f.write(f"""-- sim{plugin.short_name} lua type-checking wrapper
-- (this file is automatically generated: do not edit)

local sim{plugin.short_name}={{}}

sim{plugin.short_name}._=require('{os.path.splitext(os.path.basename(args.lua_file))[0]}')

""")
    for cmd in plugin.commands:
        paramList = ','.join(p.name for p in cmd.params)
        f.write(f"""
function sim{plugin.short_name}.{cmd.name}(...)
    {paramList}=sim.checkargsEx(
        {{level=1}},
        {{
""")
        for p in cmd.params:
            f.write(f"""            {{type='{p.dtype}'""")
            if isinstance(p,ParamTable):
                f.write(f""",item_type='{p.itype}'""")
            f.write(f"""}},
""")
        f.write(f"""        }},
        ...
    )
    return sim{plugin.short_name}._.{cmd.name}({paramList})
end
""")
    f.write(f"""
return sim{plugin.short_name}
""")
